on:
  push:
    branches: [ 'release/**' ]

name: Node Project `CRON Jobs` CI on ECR

jobs:
  deploy:
    name: Deploy Backend
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push the image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ vars.ECR_REPO_BACKEND }}        
        IMAGE_TAG: ${{ github.sha }}

        
      run: |
        # Build a docker container and push it to ECR
        echo "Building docker image"
        echo $IMAGE_TAG
        docker build . -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f ./backend/Dockerfile
        echo "Pushing image to ECR..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT


    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
      with:
        task-definition: ${{ vars.ECS_TASK_DEFINITION_BACKEND }}
        container-name: ${{ vars.CONTAINER_NAME_BACKEND }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ vars.ECS_SERVICE_BACKEND }}
        cluster: ${{ vars.ECS_CLUSTER_BACKEND }}
        wait-for-service-stability: true